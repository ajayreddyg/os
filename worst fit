Aim:- To implement Worst fit Memory management scheme
Algorithm:-
Step 1: Input memory block with a size.
Step 2: Input process with size.
Step 3: Initialize by selecting each process to find the maximum block size that can be 
assigned to the current process.
Step 4: If the condition does not fulfill, they leave the process.
Step 5: If the condition is not fulfilled, then leave the process and check for the next 
process.
Step 6: Stop.
Program:-
#include <stdio.h>
void implimentWorstFit(int blockSize[], int blocks, int processSize[], int processes)
{
 int allocation[processes];
 int occupied[blocks];
 for(int i = 0; i < processes; i++){
 allocation[i] = -1;
 }
 
 for(int i = 0; i < blocks; i++){
 occupied[i] = 0;
 }
 for (int i=0; i < processes; i++)
 {
 int indexPlaced = -1;
 for(int j = 0; j < blocks; j++)
 {
 if(blockSize[j] >= processSize[i] && !occupied[j])
 {
 if (indexPlaced == -1)
 indexPlaced = j;
 else if (blockSize[indexPlaced] < blockSize[j])
 indexPlaced = j;
 }
 }
 if (indexPlaced != -1)
 {
 allocation[i] = indexPlaced;
 occupied[indexPlaced] = 1;
 blockSize[indexPlaced] -= processSize[i];
 }
 }
 printf("\nProcess No.\tProcess Size\tBlock no.\n");
 for (int i = 0; i < processes; i++)
 {
 printf("%d \t\t\t %d \t\t\t", i+1, processSize[i]);
 if (allocation[i] != -1)
 printf("%d\n",allocation[i] + 1);
 else
 printf("Not Allocated\n");
 }
}
// Driver code
int main()
{
 int blockSize[] = {100, 50, 30, 120, 35};
 int processSize[] = {40, 10, 30, 60};
 int blocks = sizeof(blockSize)/sizeof(blockSize[0]);
 int processes = sizeof(processSize)/sizeof(processSize[0]);
 implimentWorstFit(blockSize, blocks, processSize, processes);
 return 0;
}
